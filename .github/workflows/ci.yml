# build and test on linux with node 18, 20
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  checks:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # pseudo-matrix for convenience, NEVER use more than a single combination
        node: [18]
        os: [ubuntu-latest]
    outputs:
      build_successful: ${{ steps.build.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: install pnpm
        shell: bash
        run: |
          PNPM_VER=$(jq -r '.packageManager | if .[0:5] == "pnpm@" then .[5:] else "packageManager in package.json does not start with pnpm@\n" | halt_error(1)  end' package.json)
          echo installing pnpm version $PNPM_VER
          npm i -g pnpm@$PNPM_VER
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      - name: install
        run: |
          pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
      - name: build
        id: build
        run: pnpm run build
      - name: lint
        if: (${{ success() }} || ${{ failure() }})
        run: pnpm run lint

  test:
    needs: checks
    if: (${{ success() }} || ${{ failure() }}) && (${{ needs.checks.output.build_successful }})
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18]
        os: [ubuntu-latest]
        include:
          - node: 20
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: install pnpm
        shell: bash
        run: |
          PNPM_VER=$(jq -r '.packageManager | if .[0:5] == "pnpm@" then .[5:] else "packageManager in package.json does not start with pnpm@\n" | halt_error(1)  end' package.json)
          echo installing pnpm version $PNPM_VER
          npm i -g pnpm@$PNPM_VER
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      - name: install
        run: |
          pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
      - name: build
        run: pnpm run build
      - name: run tests
        run: pnpm test
